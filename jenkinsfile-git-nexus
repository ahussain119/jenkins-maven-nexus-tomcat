pipeline {
    agent any

    environment {
        // Define environment variables
        GIT_REPO = 'https://github.com/ahussain119/simple-webapp.git'
        BRANCH = 'main'
        NEXUS_VERSION = "nexus3"
        NEXUS_PROTOCOL = "http"
        NEXUS_URL = "URL:8081"
        NEXUS_REPOSITORY = "web-java"
        NEXUS_CREDENTIAL_ID = "nexus"
    }

    stages {
        stage('Checkout') {
            agent {
                label 'maven'
            }
            steps {
                // Checkout the code from the specified Git repository and branch
                git branch: BRANCH, url: GIT_REPO
            }
        }
        
        stage('Build') {
            agent {
                label 'maven'
            }
            steps {
                // Build the project using Maven
                sh 'mvn clean package'
            }
            post {
                success {
                    script {
                        // Print a message and list files in the target directory after the build
                        echo "Listing files in target directory after build:"
                        sh 'ls -l target'
                        // Stash the built artifact (WAR file and pom.xml) for later use
                        stash includes: 'target/*.war, pom.xml', name: 'built-artifact'
                    }
                }
            }
        }
        
        stage('Deploy to Nexus') {
            agent {
                label 'nexus'
            }
            steps {
                // Unstash the built artifact
                unstash 'built-artifact'
                script {
                    // Read the Maven POM file
                    def pom = readMavenPom file: "pom.xml"
                    // Find the built artifact file in the target directory
                    def filesByGlob = findFiles(glob: "target/*.${pom.packaging}")
                    // Print information about the artifact file
                    echo "${filesByGlob[0].name} ${filesByGlob[0].path} ${filesByGlob[0].directory} ${filesByGlob[0].length} ${filesByGlob[0].lastModified}"
                    // Get the path of the artifact file
                    def artifactPath = filesByGlob[0].path
                    // Check if the artifact file exists
                    def artifactExists = fileExists artifactPath
                    if (artifactExists) {
                        // Print information about the artifact and deploy it to Nexus
                        echo "*** File: ${artifactPath}, group: ${pom.groupId}, packaging: ${pom.packaging}, version ${pom.version}"
                        nexusArtifactUploader(
                            nexusVersion: NEXUS_VERSION,
                            protocol: NEXUS_PROTOCOL,
                            nexusUrl: NEXUS_URL,
                            groupId: pom.groupId,
                            version: pom.version,
                            repository: NEXUS_REPOSITORY,
                            credentialsId: NEXUS_CREDENTIAL_ID,
                            artifacts: [
                                // Upload the JAR artifact
                                [artifactId: pom.artifactId,
                                classifier: '',
                                file: artifactPath,
                                type: pom.packaging],

                                // Upload the POM file
                                [artifactId: pom.artifactId,
                                classifier: '',
                                file: "pom.xml",
                                type: "pom"]
                            ]
                        )
                    } else {
                        // Throw an error if the artifact file is not found
                        error "Artifact file not found: ${artifactPath}"
                    }
                }
            }
        }
    }

    post {
        success {
            // Print a success message if the build and deployment were successful
            echo 'Build and deployment were successful!'
        }
        failure {
            // Print a failure message if the build or deployment failed
            echo 'Build or deployment failed!'
        }
    }
}
